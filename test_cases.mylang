// VARIABLE DECLARATIONS - VALID CASES
let mut aa = 1 < 2;
let a: Int = 42 + 5;
let b: Str = "hello" + "asdas";
let bb: Str = "hello" + " qwewasdas";
let c: Bool = false;
let mut b1 = "s";
let mut a1 = "s";
let mut x1: Int = 0;
let mut y1: Str = "";
let mut z1: Int = 0;
let mut d: [Int] = [1, 2, 3];
let mut e: {Str, Int} = {"a": 1, "b": 2};

// // IF STATEMENTS - VALID CASES
// let conditionA: Bool = true;
// if conditionA {
    // let x2: Int = 10;
// }
//  else {
    // let y2: Str = "ok";
// }

// let conditionB: Bool = true;
// let conditionC: Bool = false;
// if conditionB {
//     if conditionC {
//         let n: Int = 123;
//     }
// }

// let conditionD: Bool = true;
// if conditionD {
//     let msg: Str = "hello";
// }

// let conditionE: Bool = true;
// let conditionF: Bool = false;
// if conditionE {
//     let u: Int = 10;
// } else if conditionF {
//     let v: Int = 20;
// } else {
//     let w: Int = 30;
// }

// // FUNCTIONS - VALID CASES
// fn getValue() -> Int { return 5; }
// fn getUser(id: Int) -> (Int, Str) { return id, "user"; }
// fn processData(a: Int, b: Int) -> (Int, Str) { return a + b, "result"; }
// fn simpleFunction(param: Str) -> Str { return param; }
// fn mathOperation(x: Int, y: Int) -> Int { return x + y; }
// fn arrayFunction(arr: [Int]) -> [Int] { return arr; }
// fn mapFunction(map: {Str, Int}) -> {Str, Int} { return map; }
// fn conditionalReturn() -> Int {
//     if true { return 1; }
//     else { return 2; }
// }
// fn scopeTest() {
//     let localVar: Int = 5;
//     print(localVar);
// }
// fn validFunction(param: Int) {
//     let localB: Int = 99;
// }
// fn overload1(param: Int) -> Int { return param; }
// fn overload2(param: Str) -> Str { return param; }
// fn recursiveFunc(x: Int) -> Int { return recursiveFunc(x - 1); }

// // ASSIGNMENTS - VALID CASES

// let a2 = getValue();

// let x11, y11 = processData(1, 2);

// fn getUserDetails(a: Int) ->(Int,Int,Int) { return a,a,a; }
// let z12, t12, y12 = getUserDetails(5);

// // PRINT STATEMENTS - VALID CASES
// print(42);
// print(true);
// print("Hello World");
// let x: Int = 10;
// print(x);
// let y: Int = 30;
// print("x:", x, "y:", y);
// print(x + y, "sum:", x + y);
// let arr1 = [1, 2, 3];
// print(arr1);
// let arr2 = ["a", "b", "c"];
// print(arr2);
// print([x, y, x+y]);
// let m1 = { "a": 1, "b": 2 };
// print(m1);
// let m2 = { "num": "x", "str": "hi" };
// print(m2);
// print({ "sum": x+y });
// print([[1,2],[3,4]]);
// print({ "nums": [1,2,3] });
// print({ "user": { "name": "Alice", "age": "25" } });
// print(x + y);
// print(x > y);
// print("result:", x + y);

// // COLLECTIONS - VALID CASES
let matrix: [[Int]] = [[1, 2], [3, 4], [5, 6]];
let stats: {Str, [Int]} = {"scores": [10, 20, 30], "levels": [1, 2, 3]};
let users: [{Str, Int}] = [
    {"id": 1, "age": 25},
    {"id": 2, "age": 30}
];
let userGroups: {Str, [{Str, Int}]} = {
    "admins": [
        {"id": 1, "age": 25},
        {"id": 2, "age": 30}
    ],
    "guests": [
        {"id": 3, "age": 22}
    ]
};
let deepNested: [[{Str, Int}]] = [
    [
        {"id": 1, "score": 100},
        {"id": 2, "score": 90}
    ],
    [
        {"id": 3, "score": 80}
    ]
];
let validMapKeys = {1: "a", 2: "b"};
let validNestedMap = {
    "a": {1: "x"},
    "b": {2: "y"}
};

// // FOR LOOPS - VALID CASES
// let n1 = 5;
// for i in 0..n1 {
// }

// for i in 0..10 {
//     print(i);
// }

// for i in 0..=10 {
//     print(i);
// }

// let arr = [1,2,3];
// for item in arr {
//     print(item);
// }





// for i in 0..10 {
//     if i == 5 { break; }
//     print(i);
// }

// for i in 0..10 {
//     if i % 2 == 0 { continue; }
//     print(i);
// }

// for _ in 1..=10 {
//     print("Hello");
// }


// let map = {"a": 1, "b": 2};
// for (key, value) in map {
//     print(key, value);
// }

// for {
//     print("running forever");
// }

// // STRUCTS AND ENUMS - VALID CASES
// struct FAuserProfile {
//     name: Str,
//     age: Int,
// }

// struct FAadminRole {
//     level: Int
// }

// struct FAmixedTypes {
//     id: Int,
//     username: Str,
//     isActive: Bool,
// }

// struct FAcompany {
//     name: Str,
//     ceo: FAuserProfile,
// }

// struct FAcontainer {
//     user: FAuserProfile,
//     role: FAuserRole,
// }

// struct FAemptyStruct {}

// enum FAuserRole {
//     Admin(FAadminRole),
//     Guest,
//     Moderator,
// }

// enum FAoptionExample {
//     Somess(Int),
//     None,
// }

// enum FAsimpleEnum {
//     Red,
//     Green,
//     Blue,
// }

// enum FAemptyEnum {}

// // VARIABLE DECLARATIONS - INVALID CASES (FAIL)
// let FAa: Str = 5;
// let FAb: Int = true;
// let FAc: {Str, Int} = [1, 2, 3];
// let FAd: {Str} = "hello";

// let FAe: Int = 10;
// let FAe: Int = 20;

// let FAf: Str = "abc";
// let FAf: Int = 123;

// let FAg: Int = FAunknown;
// let FAh: Str = FAmissing;

// // IF STATEMENTS - INVALID CASES (FAIL)
// let FAcondition: Int = 5;
// if FAcondition {
//     let FAwrong: Int = 99;
// }

// if FAundeclared {
//     let FAc: Int = 1;
// }

// let FAd: Bool = true;
// if FAd {
//     let FAe: Int = FAunknownvar;
// }

// let FAf: Bool = true;
// if FAf {
//     let FAg: Int = 1;
// } else {
//     let FAh: Str = FAmissing;
// }

// let FAi: Bool = true;
// if FAi {
//     let FAj: Int = "oops";
// } else {
//     let FAk: Str = 42;
// }

// let FAo: Bool = true;
// let FAp: Int = 42;
// if FAo {
//     if FAp {
//         let FAq: Int = 99;
//     }
// }

// // FUNCTIONS - INVALID CASES (FAIL)
// fn FAfoo() {
//     return 42;
// }
// fn FAwrongReturn2() -> Int { return "hi"; }
// fn FAwrongReturn3() { return 5; }
// fn FAwrongReturn4() -> Int {
//     if true { return 1; }
//     else { return "oops"; }
// }

// fn FAdup(param: Int) -> Int { return param; }
// fn FAdup(param: Int) -> Str { return param; }

// fn FAdupParam(param: Int, param: Int) {}

// fn FAuseUndeclared() {
//     print(FAundeclared);
// }

// // ASSIGNMENTS - INVALID CASES (FAIL)
// let mut FAa = "s";
// let mut FAb = "s";
// FAa, FAb = 42;
// FAa, FAb = "invalid";

// FAa, FAb = FAunknownFunc(5);

// fn FAsomeFunction3(a: Int, b: Int) -> (Int, Str) { return 5, "s"; }
// FAa = FAsomeFunction3(1, 2);

// fn FAsomeFunction4(a: Int, b: Int) -> (Int, Str) { return 5, "s"; }
// FAa, FAb = FAsomeFunction4(1);

// fn FAsomeFunction6(a: Int, b: Int) -> (Int, Str) { return 5, "s"; }
// FAa, FAb = FAsomeFunction6(1, "invalid");

// fn FAsomeFunction5(a: Int, b: Int) -> Int { return 5; }
// let FAd, FAc = FAsomeFunction5(1, 2);

// // PRINT STATEMENTS - INVALID CASES (FAIL)
// print();
// print(x y);
// print("Hello" "World");
// print(x + );

// // COLLECTIONS - INVALID CASES (FAIL)

//  // Semantic error: VarTypeMismatch(TypeMismatch { expected: Int, found: String })
// let FAarrmixed = [1, "2", 3];

// // Semantic error: EmptyCollectionTypeInferenceError(TypeMismatch { expected: Array(Int), found: Array(Void) })
// let FAarrempty: [Int] = [];

// // Semantic error: VarTypeMismatch(TypeMismatch { expected: Array(Int), found: Array(String) })
// let FAnestedmixed = [[1, 2], ["a", "b"]];

// // Semantic error: VarTypeMismatch(TypeMismatch { expected: Int, found: String })
// let FAmapmixedvalues = {"a": 1, "b": "2"};

// // Semantic error: EmptyCollectionTypeInferenceError(TypeMismatch { expected: Map(String, Int), found: Map(Void, Void) })
// let FAmapempty: {Str, Int} = {};

// // Semantic error: VarTypeMismatch(TypeMismatch { expected: Array(Int), found: Array(String) })
// let FAmapofarraysmixed = {
//     "nums": [1, 2],
//     "letters": ["a", "b"]
// };

// // Semantic error: VarTypeMismatch(TypeMismatch { expected: Int, found: String })
// let FAdeepnestedinvalid: [[{Str, Int}]] = [
//     [
//         {"id": 1, "score": 100},
//         {"id": 2, "score": "high"}
//     ]
// ];

// // Semantic error: InvalidMapKeyType { found: Array(String), expected: [Int, String, Bool] }
// let FAmapwitharraykeys = {
//     ["a", "b"]: [1, 2],
//     ["c"]: [3]
// };

// // Semantic error: InvalidMapKeyType { found: Array(String), expected: Map(Int, Void) }
// let FAarrofmapsmixed = [
//     {"id": 1, "age": 25},
//     {"id": "x", "age": 30}
// ];

// // --- Array of maps --- to test later
// //         // Semantic error: VarTypeMismatch(TypeMismatch { expected: String, found: Int })
// //         // let arrofmapsmixed = [
// //         //     {"id": 1, "age": 25},
// //         //     {"id": "x", "age": 30} // id type mismatch
// //         // ];

// // FOR LOOPS - INVALID CASES (FAIL)
// let FAmap = {"a": 1, "b": 2};
// for FAkey in FAmap {
//     print(FAkey);
// }

// for (FAk) in FAmap {
//     print(FAk);
// }
// let FAarr = [1, 2, 3];
// for (FAx, FAy) in FAarr {
//     print(FAx, FAy);
// }

// let FAmaybeValue = "20";
// for FAx in FAmaybeValue {
//     print(FAx);
// }

// let FAnum = 42;
// for FAx in FAnum {
//     print(FAx);
// }

// let FAtuplearr = {"a": 1, "b": 2};
// for (FAa, FAb, FAc) in FAtuplearr {
//     print(FAa, FAb, FAc);
// }

// for FAi in 10 {
//     print(FAi);
// }

// let FAmaybeBool = true;
// for FAb in FAmaybeBool {
//     print(FAb);
// }

// // STRUCTS AND ENUMS - INVALID CASES (FAIL)
// struct FAinvalidStruct {
//     FAname: Str,
//     FAname: Int,
// }

// enum FAinvalidEnum {
//     FAFirst,
//     FASecond,
//     FAFirst,
// }

// enum FAinvalidEnum2 {
//     FAuserProfile,
//     FAguest,
// }
