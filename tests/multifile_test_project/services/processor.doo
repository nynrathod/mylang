import core::validation::IsValidAge;
import core::validation::IsValidScore;
import core::validation::ValidateSum;
import core::logic::And;
import core::logic::ValidateAgeAndScore;
import services::calculator::Calculate;
import services::calculator::SquareSum;

fn Process(age: Int, score: Int) -> Int {
    let valid = ValidateAgeAndScore(age, score);
    if valid == 1 {
        return Calculate(1, age, score);
    }
    return 0;
}

fn ValidateAndCalculate(a: Int, b: Int) -> Int {
    let ageOk = IsValidAge(a);
    let scoreOk = IsValidScore(b);
    let bothOk = And(ageOk, scoreOk);
    if bothOk == 1 {
        return SquareSum(a, b);
    }
    return 0;
}

fn ProcessWithValidation(age: Int, score: Int, limit: Int) -> Int {
    let valid = ValidateSum(age, score, limit);
    if valid == 1 {
        return Calculate(1, age, score);
    }
    return 0;
}
