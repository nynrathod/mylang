fn fibonacci(n: Int) -> Int {
    if n <= 1 {
        return n;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

fn factorial(n: Int) -> Int {
    if n <= 1 {
        return 1;
    }
    return n * factorial(n - 1);
}

fn isPrime(num: Int) -> Int {
    if num < 2 {
        return 0;
    }
    for i in 2..num {
        if num % i == 0 {
            return 0;
        }
    }
    return 1;
}

fn sumRange(start: Int, end: Int) -> Int {
    let mut sum = 0;
    for i in start..end {
        sum += i;
    }
    return sum;
}

fn productRange(start: Int, end: Int) -> Int {
    let mut product = 1;
    for i in start..end {
        product *= i;
    }
    return product;
}

fn countEven(arr: [Int]) -> Int {
    let mut count = 0;
    for i in 0..10 {
        if arr[i] % 2 == 0 {
            count += 1;
        }
    }
    return count;
}

fn countOdd(arr: [Int]) -> Int {
    let mut count = 0;
    for i in 0..10 {
        if arr[i] % 2 != 0 {
            count += 1;
        }
    }
    return count;
}

fn findMax(arr: [Int]) -> Int {
    let mut max = arr[0];
    for i in 1..10 {
        if arr[i] > max {
            max = arr[i];
        }
    }
    return max;
}

fn findMin(arr: [Int]) -> Int {
    let mut min = arr[0];
    for i in 1..10 {
        if arr[i] < min {
            min = arr[i];
        }
    }
    return min;
}

fn average(arr: [Int]) -> Int {
    let mut sum = 0;
    for i in 0..10 {
        sum += arr[i];
    }
    return sum / 10;
}

fn reverse(arr: [Int]) -> [Int] {
    return [arr[9], arr[8], arr[7], arr[6], arr[5], arr[4], arr[3], arr[2], arr[1], arr[0]];
}

fn doubleArray(arr: [Int]) -> [Int] {
    return [arr[0] * 2, arr[1] * 2, arr[2] * 2, arr[3] * 2, arr[4] * 2, arr[5] * 2, arr[6] * 2, arr[7] * 2, arr[8] * 2, arr[9] * 2];
}

fn halveArray(arr: [Int]) -> [Int] {
    return [arr[0] / 2, arr[1] / 2, arr[2] / 2, arr[3] / 2, arr[4] / 2, arr[5] / 2, arr[6] / 2, arr[7] / 2, arr[8] / 2, arr[9] / 2];
}

fn addOne(arr: [Int]) -> [Int] {
    return [arr[0] + 1, arr[1] + 1, arr[2] + 1, arr[3] + 1, arr[4] + 1, arr[5] + 1, arr[6] + 1, arr[7] + 1, arr[8] + 1, arr[9] + 1];
}

fn subtractOne(arr: [Int]) -> [Int] {
    return [arr[0] - 1, arr[1] - 1, arr[2] - 1, arr[3] - 1, arr[4] - 1, arr[5] - 1, arr[6] - 1, arr[7] - 1, arr[8] - 1, arr[9] - 1];
}

fn squareArray(arr: [Int]) -> [Int] {
    return [arr[0] * arr[0], arr[1] * arr[1], arr[2] * arr[2], arr[3] * arr[3], arr[4] * arr[4], arr[5] * arr[5], arr[6] * arr[6], arr[7] * arr[7], arr[8] * arr[8], arr[9] * arr[9]];
}

fn cubeArray(arr: [Int]) -> [Int] {
    let a0 = arr[0] * arr[0] * arr[0];
    let a1 = arr[1] * arr[1] * arr[1];
    let a2 = arr[2] * arr[2] * arr[2];
    let a3 = arr[3] * arr[3] * arr[3];
    let a4 = arr[4] * arr[4] * arr[4];
    let a5 = arr[5] * arr[5] * arr[5];
    let a6 = arr[6] * arr[6] * arr[6];
    let a7 = arr[7] * arr[7] * arr[7];
    let a8 = arr[8] * arr[8] * arr[8];
    let a9 = arr[9] * arr[9] * arr[9];
    return [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9];
}

fn filterGreater(arr: [Int], threshold: Int) -> Int {
    let mut count = 0;
    for i in 0..10 {
        if arr[i] > threshold {
            count += 1;
        }
    }
    return count;
}

fn filterLess(arr: [Int], threshold: Int) -> Int {
    let mut count = 0;
    for i in 0..10 {
        if arr[i] < threshold {
            count += 1;
        }
    }
    return count;
}

fn filterEqual(arr: [Int], value: Int) -> Int {
    let mut count = 0;
    for i in 0..10 {
        if arr[i] == value {
            count += 1;
        }
    }
    return count;
}

fn sumAllElements(arr: [Int]) -> Int {
    let mut total = 0;
    for i in 0..10 {
        total += arr[i];
    }
    return total;
}

fn productAllElements(arr: [Int]) -> Int {
    let mut product = 1;
    for i in 0..10 {
        product *= arr[i];
    }
    return product;
}

fn alternatingSum(arr: [Int]) -> Int {
    let mut sum = 0;
    for i in 0..10 {
        if i % 2 == 0 {
            sum += arr[i];
        } else {
            sum -= arr[i];
        }
    }
    return sum;
}

fn alternatingProduct(arr: [Int]) -> Int {
    let mut product = 1;
    for i in 0..10 {
        if i % 2 == 0 {
            product *= arr[i];
        }
    }
    return product;
}

fn checkAllPositive(arr: [Int]) -> Int {
    for i in 0..10 {
        if arr[i] <= 0 {
            return 0;
        }
    }
    return 1;
}

fn checkAllNegative(arr: [Int]) -> Int {
    for i in 0..10 {
        if arr[i] >= 0 {
            return 0;
        }
    }
    return 1;
}

fn checkAnyEven(arr: [Int]) -> Int {
    for i in 0..10 {
        if arr[i] % 2 == 0 {
            return 1;
        }
    }
    return 0;
}

fn checkAnyOdd(arr: [Int]) -> Int {
    for i in 0..10 {
        if arr[i] % 2 != 0 {
            return 1;
        }
    }
    return 0;
}

fn countMatches(arr: [Int], value: Int) -> Int {
    let mut count = 0;
    for i in 0..10 {
        if arr[i] == value {
            count += 1;
        }
    }
    return count;
}

fn gcd(a: Int, b: Int) -> Int {
    if b == 0 {
        return a;
    }
    return gcd(b, a % b);
}

fn lcm(a: Int, b: Int) -> Int {
    return (a * b) / gcd(a, b);
}

fn power(base: Int, exp: Int) -> Int {
    if exp == 0 {
        return 1;
    }
    if exp == 1 {
        return base;
    }
    return base * power(base, exp - 1);
}

fn digitSum(num: Int) -> Int {
    if num < 10 {
        return num;
    }
    return (num % 10) + digitSum(num / 10);
}

fn reverseNumber(num: Int) -> Int {
    if num < 10 {
        return num;
    }
    let digit = num % 10;
    return digit * 10 + reverseNumber(num / 10);
}

fn collatz(n: Int) -> Int {
    if n == 1 {
        return 1;
    }
    if n % 2 == 0 {
        return 1 + collatz(n / 2);
    }
    return 1 + collatz(3 * n + 1);
}

fn sumDigits(num: Int) -> Int {
    let mut sum = 0;
    let mut n = num;
    for i in 0..10 {
        sum += n % 10;
        n = n / 10;
    }
    return sum;
}

fn countDigits(num: Int) -> Int {
    if num == 0 {
        return 1;
    }
    let mut count = 0;
    let mut n = num;
    for i in 0..10 {
        if n == 0 {
            return count;
        }
        count += 1;
        n = n / 10;
    }
    return count;
}

fn isArmstrong(num: Int) -> Int {
    let digits = countDigits(num);
    let sum = sumDigits(num);
    if sum == num {
        return 1;
    }
    return 0;
}

fn trapezoidArea(a: Int, b: Int, h: Int) -> Int {
    return ((a + b) * h) / 2;
}

fn circleArea(r: Int) -> Int {
    return r * r * 314 / 100;
}

fn triangleArea(base: Int, height: Int) -> Int {
    return (base * height) / 2;
}

fn rectangleArea(length: Int, width: Int) -> Int {
    return length * width;
}

fn parallelogramArea(base: Int, height: Int) -> Int {
    return base * height;
}

fn rhombusArea(d1: Int, d2: Int) -> Int {
    return (d1 * d2) / 2;
}

fn pentagonPerimeter(side: Int) -> Int {
    return side * 5;
}

fn hexagonPerimeter(side: Int) -> Int {
    return side * 6;
}

fn octagonPerimeter(side: Int) -> Int {
    return side * 8;
}

fn cubeSurfaceArea(side: Int) -> Int {
    return 6 * side * side;
}

fn cubeVolume(side: Int) -> Int {
    return side * side * side;
}

fn sphereSurfaceArea(r: Int) -> Int {
    return 4 * r * r * 314 / 100;
}

fn cylinderVolume(r: Int, h: Int) -> Int {
    return r * r * 314 * h / 100;
}

fn conesurfaceArea(r: Int, h: Int) -> Int {
    return r * (r + h) * 314 / 100;
}

fn pyramidVolume(baseArea: Int, height: Int) -> Int {
    return (baseArea * height) / 3;
}

fn distanceBetweenPoints(x1: Int, y1: Int, x2: Int, y2: Int) -> Int {
    let dx = x2 - x1;
    let dy = y2 - y1;
    return dx * dx + dy * dy;
}

fn manhattanDistance(x1: Int, y1: Int, x2: Int, y2: Int) -> Int {
    let dx = x2 - x1;
    let dy = y2 - y1;
    if dx < 0 {
        dx = dx * -1;
    }
    if dy < 0 {
        dy = dy * -1;
    }
    return dx + dy;
}

fn midpointX(x1: Int, x2: Int) -> Int {
    return (x1 + x2) / 2;
}

fn midpointY(y1: Int, y2: Int) -> Int {
    return (y1 + y2) / 2;
}

fn slopeOfLine(x1: Int, y1: Int, x2: Int, y2: Int) -> Int {
    let dy = y2 - y1;
    let dx = x2 - x1;
    if dx == 0 {
        return 0;
    }
    return dy / dx;
}

fn main() {
    print("=== Large Program Test ===");

    let testArr: [Int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

    print("Fibonacci(5):", fibonacci(5));
    print("Factorial(5):", factorial(5));
    print("IsPrime(17):", isPrime(17));
    print("SumRange(1, 11):", sumRange(1, 11));
    print("ProductRange(1, 6):", productRange(1, 6));

    print("CountEven:", countEven(testArr));
    print("CountOdd:", countOdd(testArr));
    print("FindMax:", findMax(testArr));
    print("FindMin:", findMin(testArr));
    print("Average:", average(testArr));

    print("FilterGreater(5):", filterGreater(testArr, 5));
    print("FilterLess(6):", filterLess(testArr, 6));
    print("SumAllElements:", sumAllElements(testArr));
    print("ProductAllElements:", productAllElements(testArr));

    print("AlternatingSum:", alternatingSum(testArr));
    print("CheckAllPositive:", checkAllPositive(testArr));
    print("CheckAnyEven:", checkAnyEven(testArr));

    print("GCD(48, 18):", gcd(48, 18));
    print("Power(2, 8):", power(2, 8));
    print("DigitSum(12345):", digitSum(12345));
    print("Collatz(10):", collatz(10));
    print("SumDigits(123):", sumDigits(123));

    print("CircleArea(5):", circleArea(5));
    print("TriangleArea(4, 5):", triangleArea(4, 5));
    print("RectangleArea(5, 10):", rectangleArea(5, 10));
    print("CubeVolume(3):", cubeVolume(3));

    print("DistanceBetweenPoints(0,0,3,4):", distanceBetweenPoints(0, 0, 3, 4));
    print("MidpointX(0, 10):", midpointX(0, 10));
    print("SlopeOfLine(0,0,1,1):", slopeOfLine(0, 0, 1, 1));

    print("=== Large Program Test Completed ===");
}
